CREATE DATABASE HIIT
GO

USE HIIT
GO 
BEGIN TRANSACTION;


CREATE TABLE PERMISSION
(
	PERMISSION_ID INT NOT NULL IDENTITY (1, 1),
	PERMISSION_DESCRIPTION VARCHAR(225) NOT NULL,
	CONSTRAINT PERMISSION_PK PRIMARY KEY (PERMISSION_ID)
);

CREATE TABLE USER_ROLE
(
   USER_ROLE_ID INT NOT NULL IDENTITY (1, 1),
   USER_ROLE_NAME VARCHAR(25) NOT NULL,
   USER_ROLE_DESCRIPTION VARCHAR(225) NOT NULL,
   CONSTRAINT USER_ROLE_PK PRIMARY KEY (USER_ROLE_ID)
);


CREATE TABLE USER_ROLE_PERMISSION
(
	PERMISSION_ID INT NOT NULL,
	USER_ROLE_ID INT NOT NULL,
	FOREIGN KEY (USER_ROLE_ID) REFERENCES USER_ROLE (USER_ROLE_ID) ON DELETE CASCADE,
	FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSION (PERMISSION_ID) ON DELETE CASCADE,
	CONSTRAINT USER_ROLE_PERMISSION_PK PRIMARY KEY (USER_ROLE_ID, PERMISSION_ID)
);

CREATE TABLE TITLE
(
	TITLE_ID INT NOT NULL IDENTITY (1, 1),
	TITLE_DESCRIPTION VARCHAR(225) NOT NULL, 
	CONSTRAINT TITLE_PK PRIMARY KEY (TITLE_ID)
);

CREATE TABLE USERS
(
   USERS_ID INT NOT NULL IDENTITY (1, 1),
   USER_EMAIL VARCHAR(50) NOT NULL,
   USER_CELL VARCHAR(10) NOT NULL,
   USER_ROLE_ID INT NOT NULL,
   TITLE_ID INT NOT NULL,
   CONSTRAINT USERS_PK PRIMARY KEY (USERS_ID),
   FOREIGN KEY (USER_ROLE_ID) REFERENCES USER_ROLE (USER_ROLE_ID),
   FOREIGN KEY (TITLE_ID) REFERENCES TITLE (TITLE_ID)
);

CREATE TABLE PASSWORD_HISTORY
(
   PASSWORD_ID INT NOT NULL IDENTITY (1, 1),
   PASSWORD_DATE DATE NOT NULL,
   HASHED_PASSWORD VARCHAR(50),
   USERS_ID INT NOT NULL,
   CONSTRAINT PASSWORD_HISTORY_PK PRIMARY KEY (PASSWORD_ID),
   FOREIGN KEY (USERS_ID) REFERENCES USERS (USERS_ID)
);
  
CREATE TABLE QUALIFICATION_TYPE
(
	QUALIFICATION_TYPE_ID INT NOT NULL IDENTITY (1, 1),
	QUALIFICATION_TYPE_NAME VARCHAR(25) NOT NULL,
	CONSTRAINT QUALIFICATION_TYPE_PK PRIMARY KEY (QUALIFICATION_TYPE_ID)
);

CREATE TABLE QUALIFICATION
(
	QUALIFICATION_ID INT NOT NULL IDENTITY (1, 1),
	QUALIFICATION_DESCRIPTION VARCHAR(225) NOT NULL,
	QUALIFICATION_TYPE_ID INT NOT NULL,
	CONSTRAINT QUALIFICATION_PK PRIMARY KEY (QUALIFICATION_ID),
	FOREIGN KEY (QUALIFICATION_TYPE_ID) REFERENCES QUALIFICATION_TYPE (QUALIFICATION_TYPE_ID)
);
 
CREATE TABLE EMPLOYEE_CONTRACT
(
	EMPLOYEE_CONTRACT_ID INT NOT NULL IDENTITY (1, 1),
	EMPLOYEE_CONTRACT_FILE VARBINARY(MAX) NOT NULL,
	CONSTRAINT EMPLOYEE_CONTRACT_PK PRIMARY KEY (EMPLOYEE_CONTRACT_ID)
);

CREATE TABLE EMPLOYEE_TYPE
(
	EMPLOYEE_TYPE_ID INT NOT NULL IDENTITY (1, 1),
	EMPLOYEE_TYPE_NAME VARCHAR(25) NOT NULL,
	EMPLOYEE_TYPE_DESCRIPTION VARCHAR(225),
	CONSTRAINT EMPLOYEE_TYPE_PK PRIMARY KEY (EMPLOYEE_TYPE_ID)
);

CREATE TABLE EMPLOYEE
(
	USERS_ID INT NOT NULL,
	EMPLOYEE_ID INT NOT NULL IDENTITY (1, 1),
	EMPLOYEE_NAME VARCHAR(20) NOT NULL,
	EMPLOYEE_SURNAME VARCHAR(20) NOT NULL,
	EMPLOYEE_PHOTO VARBINARY(MAX),
	EMPLOYEE_SA_ID VARCHAR (13),
	QUALIFICATION_ID INT NOT NULL,
	EMPLOYEE_CONTRACT_ID INT NOT NULL,
	EMPLOYEE_TYPE_ID INT NOT NULL,
	FOREIGN KEY (USERS_ID) REFERENCES USERS (USERS_ID) ON DELETE CASCADE,
	FOREIGN KEY (QUALIFICATION_ID) REFERENCES QUALIFICATION (QUALIFICATION_ID),
	FOREIGN KEY (EMPLOYEE_CONTRACT_ID) REFERENCES EMPLOYEE_CONTRACT (EMPLOYEE_CONTRACT_ID),
	FOREIGN KEY (EMPLOYEE_TYPE_ID) REFERENCES EMPLOYEE_TYPE (EMPLOYEE_TYPE_ID),
	CONSTRAINT EMPLOYEE_PK PRIMARY KEY (EMPLOYEE_ID)
);

CREATE TABLE CLIENT
(
	USERS_ID INT NOT NULL,
	CLIENT_ID INT NOT NULL IDENTITY (1, 1),
	CLIENT_NAME VARCHAR(20) NOT NULL,
	CLIENT_SURNAME VARCHAR(20) NOT NULL,
	CLIENT_PHOTO VARBINARY(MAX),
	CLIENT_INDEMNITY BIT NOT NULL,
	QR_Code VARCHAR (MAX) NOT NULL,
	CONSTRAINT CLIENT_PK PRIMARY KEY (CLIENT_ID),
	FOREIGN KEY (USERS_ID) REFERENCES USERS (USERS_ID) ON DELETE CASCADE
);

CREATE TABLE MEMBER_STATUS
(
	MEMBER_STATUS_ID INT NOT NULL IDENTITY (1, 1),
	MEMBER_STATUS_NAME VARCHAR(25),
	CONSTRAINT MEMBER_STATUS_PK PRIMARY KEY (MEMBER_STATUS_ID)
);

CREATE TABLE MEMBER
(
	CLIENT_ID INT NOT NULL,
	MEMBER_ID INT NOT NULL IDENTITY (1, 1),
	MEMBER_STATUS_ID INT NOT NULL,
	FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT (CLIENT_ID) ON DELETE CASCADE,
	FOREIGN KEY (MEMBER_STATUS_ID) REFERENCES MEMBER_STATUS (MEMBER_STATUS_ID),
	CONSTRAINT MEMBER_PK PRIMARY KEY (MEMBER_ID)
);

CREATE TABLE MEASUREMENT
(
	MEMBER_ID INT NOT NULL,
	MEASUREMENT_ID INT NOT NULL IDENTITY (1, 1),
	MUSCLE_MASS_PERCENTAGE FLOAT,
	BODY_FAT_PERCENTAGE FLOAT,
	WAIST_CIRCUMFERENCE FLOAT,
	HEIGHT FLOAT,
	WEIGHT FLOAT,
	MEASUREMENT_DATE DATE NOT NULL,
	FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID),
	CONSTRAINT MEASUREMENT_PK PRIMARY KEY (MEMBER_ID, MEASUREMENT_ID)
);

CREATE TABLE SALE
(
	SALE_ID INT NOT NULL IDENTITY (1, 1),
	SALE_DATE DATE NOT NULL,
	CLIENT_ID INT NOT NULL,
	FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT (CLIENT_ID),
	CONSTRAINT SALE_PK PRIMARY KEY (SALE_ID)
);

CREATE TABLE SALE_CATEGORY
(
	SALE_CATEGORY_ID INT NOT NULL IDENTITY (1, 1),
	SALE_CATEGORY_NAME VARCHAR(25) NOT NULL,
	SALE_CATEGORY_DESC VARCHAR(225) NOT NULL,
	CONSTRAINT SALE_CATEGORY_PK PRIMARY KEY (SALE_CATEGORY_ID)
);

CREATE TABLE SALE_ITEM
(
	SALE_ITEM_ID INT NOT NULL IDENTITY (1, 1),
	SALE_ITEM_NAME VARCHAR(25) NOT NULL,
	SALE_ITEM_PHOTO VARBINARY(MAX) NOT NULL,
	SALE_ITEM_DESCRIPTION VARCHAR(225) NOT NULL,
	SALE_ITEM_PRICE DECIMAL (6, 2) NOT NULL,
	SALE_ITEM_QUOTABLE BIT NOT NULL,
	SALE_ITEM_QUANTITY INT NOT NULL,
	SALE_CATEGORY_ID INT NOT NULL,
	FOREIGN KEY (SALE_CATEGORY_ID) REFERENCES SALE_CATEGORY (SALE_CATEGORY_ID),
	CONSTRAINT SALE_ITEM_PK PRIMARY KEY (SALE_ITEM_ID)
);

CREATE TABLE PAYMENT_TYPE
(
	PAYMENT_TYPE_ID INT NOT NULL IDENTITY (1, 1),
	PAYMENT_TYPE_NAME VARCHAR(25) NOT NULL,
	CONSTRAINT PAYMENT_TYPE_PK PRIMARY KEY (PAYMENT_TYPE_ID)
);

CREATE TABLE RECEIPT
(
	RECEIPT_ID INT NOT NULL IDENTITY (1, 1),
	RECEIPT_DATE_TIME DATETIME NOT NULL,
	RECEIPT_TOTAL_VAT FLOAT NOT NULL,
	RECEIPT_TOTAL_AMOUNT FLOAT NOT NULL,
	PAYMENT_TYPE_ID INT NOT NULL,
	FOREIGN KEY (PAYMENT_TYPE_ID) REFERENCES PAYMENT_TYPE (PAYMENT_TYPE_ID),
	CONSTRAINT RECEIPT_PK PRIMARY KEY (RECEIPT_ID)
);

CREATE TABLE SALE_LINE
(
	SALE_LINE_ID INT NOT NULL IDENTITY (1, 1),
	SALE_LINE_QUANTITY INT NOT NULL,
	CLIENT_ID INT NOT NULL,
	SALE_ID INT NOT NULL,
	SALE_ITEM_ID INT NOT NULL,
	RECEIPT_ID INT NOT NULL,
	FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT (CLIENT_ID),
	FOREIGN KEY (SALE_ID) REFERENCES SALE (SALE_ID),
	FOREIGN KEY (SALE_ITEM_ID) REFERENCES SALE_ITEM (SALE_ITEM_ID),
	FOREIGN KEY (RECEIPT_ID) REFERENCES RECEIPT (RECEIPT_ID),
	CONSTRAINT SALE_LINE_PK PRIMARY KEY (SALE_LINE_ID)
);

CREATE TABLE PRICE_HISTORY
(
	PRICE_HISTORY_ID INT NOT NULL IDENTITY (1, 1),
	SALE_ITEM_ID INT NOT NULL,
	PRICE_DATE DATE NOT NULL,
	PRICE_AMOUNT DECIMAL (6,2) NOT NULL,
	FOREIGN KEY (SALE_ITEM_ID) REFERENCES SALE_ITEM (SALE_ITEM_ID),
	CONSTRAINT PRICE_HISTORY_PK PRIMARY KEY (PRICE_HISTORY_ID)
);

CREATE TABLE INVENTORY_ITEM
(
	INVENTORY_ITEM_ID INT NOT NULL IDENTITY (1, 1),
	SALE_ITEM_ID INT NOT NULL,
	INVENTORY_ITEM_COST_PRICE DECIMAL(6,2) NOT NULL,
	INVENTORY_ITEM_QUANTITY INT NOT NULL,
	FOREIGN KEY (SALE_ITEM_ID) REFERENCES SALE_ITEM (SALE_ITEM_ID),
	CONSTRAINT INVENTORY_ITEM_PK PRIMARY KEY (INVENTORY_ITEM_ID)
);

CREATE TABLE WRITE_OFF
(
	WRITE_OFF_ID INT NOT NULL IDENTITY (1, 1),
	WRITE_OFF_DATE DATE NOT NULL,
	CONSTRAINT WRITE_OFF_PK PRIMARY KEY (WRITE_OFF_ID)
);

CREATE TABLE WRITE_OFF_REASON
(
	WRITE_OFF_REASON_ID INT NOT NULL IDENTITY (1, 1),
	WRITE_OFF_REASON_DESCRIPTION VARCHAR(225) NOT NULL,
	CONSTRAINT WRITE_OFF_REASON_PK PRIMARY KEY (WRITE_OFF_REASON_ID)
);

CREATE TABLE WRITE_OFF_LINE
(
	INVENTORY_ITEM_ID INT NOT NULL,
	WRITE_OFF_ID INT NOT NULL,
	WRITE_OFF_LINE_QUANTITY INT NOT NULL,
	WRITE_OFF_REASON_ID INT NOT NULL,
	FOREIGN KEY (WRITE_OFF_REASON_ID) REFERENCES WRITE_OFF_REASON (WRITE_OFF_REASON_ID),
	FOREIGN KEY (INVENTORY_ITEM_ID) REFERENCES INVENTORY_ITEM (INVENTORY_ITEM_ID),
	FOREIGN KEY (WRITE_OFF_ID) REFERENCES WRITE_OFF (WRITE_OFF_ID),
	CONSTRAINT WRITE_OFF_LINE_PK PRIMARY KEY (INVENTORY_ITEM_ID, WRITE_OFF_ID)
);

CREATE TABLE ORDER_STATUS
(
	ORDER_STATUS_ID INT NOT NULL IDENTITY (1, 1),
	ORDER_STATUS_DESCRIPTION VARCHAR(225) NOT NULL,
	CONSTRAINT ORDER_STATUS_PK PRIMARY KEY (ORDER_STATUS_ID)
);

CREATE TABLE SUPPLIER
(
	SUPPLIER_ID INT NOT NULL IDENTITY (1, 1),
	SUPPLIER_NAME VARCHAR(25) NOT NULL,
	SUPPLIER_SURNAME VARCHAR(25) NOT NULL,
	SUPPLIER_EMAIL VARCHAR(50) NOT NULL,
	SUPPLIER_CELL VARCHAR(10) NOT NULL,
	SUPPLIER_ADDRESS VARCHAR(100) NOT NULL,
	CONSTRAINT SUPPLIER_PK PRIMARY KEY (SUPPLIER_ID)
);

CREATE TABLE SUPPLIER_ORDER
(
	SUPPLIER_ORDER_ID INT NOT NULL IDENTITY (1, 1),
	SUPPLIER_ORDER_DATE DATE NOT NULL,
	ORDER_STATUS_ID INT NOT NULL,
	SUPPLIER_ID INT NOT NULL,
	FOREIGN KEY (ORDER_STATUS_ID) REFERENCES ORDER_STATUS (ORDER_STATUS_ID),
	FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER (SUPPLIER_ID),
	CONSTRAINT SUPPLIER_ORDER_PK PRIMARY KEY (SUPPLIER_ORDER_ID)
);

CREATE TABLE SUPPLIER_ORDER_LINE
(
	SUPPLIER_ORDER_ID INT NOT NULL,
	SUPPLIER_ORDER_LINE_ID INT NOT NULL IDENTITY (1, 1),
	SUPPLIER_ORDER_LINE_QUANTITY INT NOT NULL,
	INVENTORY_ITEM_ID INT NOT NULL,
	FOREIGN KEY (INVENTORY_ITEM_ID) REFERENCES INVENTORY_ITEM (INVENTORY_ITEM_ID),
	FOREIGN KEY (SUPPLIER_ORDER_ID) REFERENCES SUPPLIER_ORDER (SUPPLIER_ORDER_ID),
	CONSTRAINT SUPPLIER_ORDER_LINE_PK PRIMARY KEY (SUPPLIER_ORDER_LINE_ID)
);

CREATE TABLE STOCK_TAKE
(
	STOCK_TAKE_ID INT NOT NULL IDENTITY (1, 1),
	STOCK_TAKE_DATE DATE NOT NULL,
	STOCK_TAKE_NOTES VARCHAR(225) NOT NULL,
	CONSTRAINT STOCK_TAKE_PK PRIMARY KEY (STOCK_TAKE_ID)
);

CREATE TABLE STOCK_TAKE_LINE
(
	STOCK_TAKE_ID INT NOT NULL,
	INVENTORY_ITEM_ID INT NOT NULL,
	SALE_ITEM_ID INT NOT NULL,
	STOCK_TAKE_LINE_DIFFERENCE INT NOT NULL,
	FOREIGN KEY (STOCK_TAKE_ID) REFERENCES STOCK_TAKE (STOCK_TAKE_ID),
	FOREIGN KEY (INVENTORY_ITEM_ID) REFERENCES INVENTORY_ITEM (INVENTORY_ITEM_ID),
	FOREIGN KEY (SALE_ITEM_ID) REFERENCES SALE_ITEM (SALE_ITEM_ID),
	CONSTRAINT STOCK_TAKE_LINE_PK PRIMARY KEY (STOCK_TAKE_ID, INVENTORY_ITEM_ID, SALE_ITEM_ID)
);

CREATE TABLE REFUND_REASON
(
	REFUND_REASON_ID INT NOT NULL IDENTITY (1, 1),
	REFUND_REASON_DESCRIPTION VARCHAR(225) NOT NULL,
	CONSTRAINT REFUND_REASON_PK PRIMARY KEY (REFUND_REASON_ID)
);

CREATE TABLE REFUND
(
	REFUND_ID INT NOT NULL IDENTITY (1, 1),
	REFUND_DATE DATE NOT NULL,
	REFUND_NOTES VARCHAR(225) NOT NULL,
	REFUND_TOTAL_AMOUNT DECIMAL (6, 2) NOT NULL,
	RECEIPT_ID INT NOT NULL,
	REFUND_REASON_ID INT NOT NULL,
	FOREIGN KEY (RECEIPT_ID) REFERENCES RECEIPT (RECEIPT_ID),
	FOREIGN KEY (REFUND_REASON_ID) REFERENCES REFUND_REASON (REFUND_REASON_ID),
	CONSTRAINT REFUND_PK PRIMARY KEY (REFUND_ID)
);

CREATE TABLE BOOKING
(
	BOOKING_ID INT NOT NULL IDENTITY (1, 1),
	BOOKING_DATE DATETIME NOT NULL,
	CLIENT_ID INT NOT NULL,
	FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT (CLIENT_ID),
	CONSTRAINT BOOKING_PK PRIMARY KEY (BOOKING_ID)
);

CREATE TABLE VENUE
(
	VENUE_ID INT NOT NULL IDENTITY (1, 1),
	VENUE_NAME VARCHAR(30) NOT NULL,
	VENUE_ADDRESS VARCHAR (100) NOT NULL,
	VENUE_POSTAL_CODE VARCHAR(10) NOT NULL,
	VENUE_CAPACITY INT NOT NULL,
	CONSTRAINT VENUE_PK PRIMARY KEY (VENUE_ID)
);

CREATE TABLE EXCERCISE_CATEGORY
(
	EXCERCISE_CATEGORY_ID INT NOT NULL IDENTITY (1, 1),
	EXCERCISE_CATEGORY_NAME VARCHAR(25) NOT NULL,
	EXCERCISE_CATEGORY_DESCRIPTION VARCHAR(225) NOT NULL,
	CONSTRAINT EXCERCISE_CATEGORY_PK PRIMARY KEY (EXCERCISE_CATEGORY_ID)
);

CREATE TABLE EXERCISE
(
	EXCERCISE_ID INT NOT NULL IDENTITY (1, 1),
	EXCERCISE_NAME VARCHAR(25) NOT NULL,
	EXCERCISE_DESCRIPTION VARCHAR(225) NOT NULL,
	EXCERCISE_CATEGORY_ID INT NOT NULL,
	FOREIGN KEY (EXCERCISE_CATEGORY_ID) REFERENCES EXCERCISE_CATEGORY (EXCERCISE_CATEGORY_ID),
	CONSTRAINT EXCERCISE_PK PRIMARY KEY (EXCERCISE_ID)
);

CREATE TABLE LESSON
(
	LESSON_ID INT NOT NULL IDENTITY (1, 1),
	LESSON_NAME VARCHAR(25) NOT NULL,
	EMPLOYEE_ID INT NOT NULL,
	FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID),
	CONSTRAINT LESSON_PK PRIMARY KEY (LESSON_ID)
);

CREATE TABLE LESSON_PLAN
(
	LESSON_PLAN_ID INT NOT NULL IDENTITY (1, 1),
	LESSON_ID INT NOT NULL,
	EXCERCISE_ID INT NOT NULL,
	FOREIGN KEY (LESSON_ID) REFERENCES LESSON (LESSON_ID),
	FOREIGN KEY (EXCERCISE_ID) REFERENCES EXERCISE (EXCERCISE_ID),
	CONSTRAINT LESSON_PLAN_PK PRIMARY KEY (LESSON_PLAN_ID)
);

CREATE TABLE SESSION
(
	SESSION_ID INT NOT NULL IDENTITY (1, 1),
	SESSION_START DATETIME NOT NULL,
	SESSION_END DATETIME NOT NULL,
	CONSTRAINT SESSION_PK PRIMARY KEY (SESSION_ID)
);

CREATE TABLE DATE_SESSION
(
	DATE_SESSION_ID INT NOT NULL IDENTITY (1, 1),
	DATE_SESSION DATETIME NOT NULL,
	SESSION_ID INT NOT NULL,
	FOREIGN KEY (SESSION_ID) REFERENCES SESSION (SESSION_ID),
	CONSTRAINT DATE_SESSION_PK PRIMARY KEY (DATE_SESSION_ID)
);

CREATE TABLE BOOKING_TYPE
(
	BOOKING_TYPE_ID INT NOT NULL IDENTITY (1, 1),
	BOOKING_TYPE_NAME VARCHAR(25) NOT NULL,
	BOOKING_TYPE_DESCRIPTION VARCHAR(225) NOT NULL,
	CONSTRAINT BOOKING_TYPE_PK PRIMARY KEY (BOOKING_TYPE_ID)
);

CREATE TABLE BOOKING_PRICE_HISTORY
(
	BOOKING_PRICE_HISTORY_ID INT NOT NULL IDENTITY (1, 1),
	BOOKING_PRICE_HISTORY_DATE DATE NOT NULL,
	BOOKING_PRICE_HISTORY_AMOUNT DECIMAL (6, 2) NOT NULL,
	BOOKING_TYPE_ID INT NOT NULL,
	FOREIGN KEY (BOOKING_TYPE_ID) REFERENCES BOOKING_TYPE (BOOKING_TYPE_ID),
	CONSTRAINT BOOKING_PRICE_HISTORY_PK PRIMARY KEY (BOOKING_PRICE_HISTORY_ID, BOOKING_TYPE_ID)
);

CREATE TABLE SCHEDULE
(
	SCHEDULE_ID INT NOT NULL IDENTITY (1, 1),
	SCHEDULE_CAPACITY_BOOKED INT NOT NULL,
	VENUE_ID INT NOT NULL,
	BOOKING_TYPE_ID INT NOT NULL,
	LESSON_PLAN_ID INT NOT NULL,
	DATE_SESSION_ID INT NOT NULL,
	FOREIGN KEY (VENUE_ID) REFERENCES VENUE (VENUE_ID),
	FOREIGN KEY (BOOKING_TYPE_ID) REFERENCES BOOKING_TYPE (BOOKING_TYPE_ID),
	FOREIGN KEY (LESSON_PLAN_ID) REFERENCES LESSON_PLAN (LESSON_PLAN_ID),
	FOREIGN KEY (DATE_SESSION_ID) REFERENCES DATE_SESSION (DATE_SESSION_ID),
	CONSTRAINT SCHEDULE_PK PRIMARY KEY (SCHEDULE_ID)
);

CREATE TABLE VAT
(
	VAT_ID INT NOT NULL IDENTITY (1, 1),
	VAT_PRICE DECIMAL (6, 2) NOT NULL,
	VAT_DATE DATE NOT NULL,
	CONSTRAINT VAT_PK PRIMARY KEY (VAT_ID)
);

CREATE TABLE BOOKING_ATTENDANCE
(
	BOOKING_ID INT NOT NULL,
	SCHEDULE_ID INT NOT NULL,
	ATTENDED BIT NOT NULL,
	RECEIPT_ID INT NOT NULL,
	FOREIGN KEY (BOOKING_ID) REFERENCES BOOKING (BOOKING_ID),
	FOREIGN KEY (SCHEDULE_ID) REFERENCES SCHEDULE (SCHEDULE_ID),
	FOREIGN KEY (RECEIPT_ID) REFERENCES RECEIPT (RECEIPT_ID),
	CONSTRAINT BOOKING_ATTENDANCE_PK PRIMARY KEY (BOOKING_ID, SCHEDULE_ID)
);


INSERT INTO VENUE (VENUE_NAME, VENUE_ADDRESS, VENUE_POSTAL_CODE, VENUE_CAPACITY)
VALUES ('Main Building','123 Street','1012','55'),
	   ('Second Building','123 Avenue','2101','105'),
	   ('Third Building','123 Park','011','27'),
	   ('Fourth Building','123 Ally','2009','87');

COMMIT TRANSACTION;                                      