// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Team7.Context;

namespace Team7.Migrations
{
    [DbContext(typeof(AppDB))]
    partial class AppDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Team7.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TitleID")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TitleID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Team7.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("BookingID");

                    b.HasIndex("ClientID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Team7.Models.BookingAttendance", b =>
                {
                    b.Property<int>("BookingAttendanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Attended")
                        .HasColumnType("bit");

                    b.Property<int?>("BookingID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleID")
                        .HasColumnType("int");

                    b.HasKey("BookingAttendanceID");

                    b.HasIndex("BookingID");

                    b.HasIndex("ScheduleID");

                    b.ToTable("BookingAttendance");
                });

            modelBuilder.Entity("Team7.Models.BookingPriceHistory", b =>
                {
                    b.Property<int>("BookingPriceHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BookingTypeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("BookingPriceHistoryID");

                    b.HasIndex("BookingTypeID");

                    b.ToTable("BookingPriceHistory");
                });

            modelBuilder.Entity("Team7.Models.BookingType", b =>
                {
                    b.Property<int>("BookingTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingTypeID");

                    b.ToTable("BookingType");
                });

            modelBuilder.Entity("Team7.Models.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Idemnity")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QrCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Team7.Models.DateSession", b =>
                {
                    b.Property<int>("DateSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SessionID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("DateSessionID");

                    b.HasIndex("SessionID");

                    b.ToTable("DateSession");
                });

            modelBuilder.Entity("Team7.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contract")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeTypeID")
                        .HasColumnType("int");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QualificationID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("EmployeeTypeID");

                    b.HasIndex("QualificationID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Team7.Models.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeTypeID");

                    b.ToTable("EmployeeType");
                });

            modelBuilder.Entity("Team7.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExerciseCategoryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExerciseID");

                    b.HasIndex("ExerciseCategoryID");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("Team7.Models.ExerciseCategory", b =>
                {
                    b.Property<int>("ExerciseCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExerciseCategoryID");

                    b.ToTable("ExerciseCategory");
                });

            modelBuilder.Entity("Team7.Models.InventoryItem", b =>
                {
                    b.Property<int>("InventoryItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SaleItemID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("InventoryItemID");

                    b.HasIndex("SaleItemID");

                    b.ToTable("InventoryItem");
                });

            modelBuilder.Entity("Team7.Models.Lesson", b =>
                {
                    b.Property<int>("LessonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("Team7.Models.LessonPlan", b =>
                {
                    b.Property<int>("LessonPlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ExerciseID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("LessonID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("LessonPlanID");

                    b.HasIndex("ExerciseID");

                    b.HasIndex("LessonID");

                    b.ToTable("LessonPlan");
                });

            modelBuilder.Entity("Team7.Models.Measurement", b =>
                {
                    b.Property<int>("MeasurementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("BodyFate")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<int?>("MemberID")
                        .HasColumnType("int");

                    b.Property<double?>("MuscleMass")
                        .HasColumnType("float");

                    b.Property<double?>("Waist")
                        .HasColumnType("float");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("MeasurementID");

                    b.HasIndex("MemberID");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("Team7.Models.Member", b =>
                {
                    b.Property<int>("MemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<int?>("MemberStatusID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("MemberID");

                    b.HasIndex("ClientID");

                    b.HasIndex("MemberStatusID");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Team7.Models.MemberStatus", b =>
                {
                    b.Property<int>("MemberStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberStatusID");

                    b.ToTable("MemberStatus");
                });

            modelBuilder.Entity("Team7.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusID");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("Team7.Models.PasswordHistory", b =>
                {
                    b.Property<int>("PasswordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hashed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PasswordID");

                    b.ToTable("PasswordHistory");
                });

            modelBuilder.Entity("Team7.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookingID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SaleID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("BookingID");

                    b.HasIndex("PaymentTypeID");

                    b.HasIndex("SaleID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Team7.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentTypeID");

                    b.ToTable("PaymentType");
                });

            modelBuilder.Entity("Team7.Models.PriceHistory", b =>
                {
                    b.Property<int>("PriceHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SaleItemID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("PriceHistoryID");

                    b.HasIndex("SaleItemID");

                    b.ToTable("PriceHistory");
                });

            modelBuilder.Entity("Team7.Models.Qualification", b =>
                {
                    b.Property<int>("QualificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QualificationTypeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("QualificationID");

                    b.HasIndex("QualificationTypeID");

                    b.ToTable("Qualification");
                });

            modelBuilder.Entity("Team7.Models.QualificationType", b =>
                {
                    b.Property<int>("QualificationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QualificationTypeID");

                    b.ToTable("QualificationType");
                });

            modelBuilder.Entity("Team7.Models.Refund", b =>
                {
                    b.Property<int>("RefundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("RefundReasonID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RefundID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("RefundReasonID");

                    b.ToTable("Refund");
                });

            modelBuilder.Entity("Team7.Models.RefundReason", b =>
                {
                    b.Property<int>("RefundReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefundReasonID");

                    b.ToTable("RefundReason");
                });

            modelBuilder.Entity("Team7.Models.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SaleID");

                    b.HasIndex("ClientID");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("Team7.Models.SaleCategory", b =>
                {
                    b.Property<int>("SaleCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SaleCategoryID");

                    b.ToTable("SaleCategory");
                });

            modelBuilder.Entity("Team7.Models.SaleItem", b =>
                {
                    b.Property<int>("SaleItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Quotable")
                        .HasColumnType("bit");

                    b.Property<int?>("SaleCategoryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("SaleItemID");

                    b.HasIndex("SaleCategoryID");

                    b.ToTable("SaleItem");
                });

            modelBuilder.Entity("Team7.Models.SaleLine", b =>
                {
                    b.Property<int>("SaleLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SaleID")
                        .HasColumnType("int");

                    b.Property<int?>("SaleItemID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("SaleLineID");

                    b.HasIndex("ClientID");

                    b.HasIndex("SaleID");

                    b.HasIndex("SaleItemID");

                    b.ToTable("SaleLine");
                });

            modelBuilder.Entity("Team7.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookingTypeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("CapacityBooked")
                        .HasColumnType("int");

                    b.Property<int?>("DateSessionID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("LessonPlanID")
                        .HasColumnType("int");

                    b.Property<int?>("VenueID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ScheduleID");

                    b.HasIndex("BookingTypeID");

                    b.HasIndex("DateSessionID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("LessonPlanID");

                    b.HasIndex("VenueID");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Team7.Models.Session", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionID");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("Team7.Models.StockTake", b =>
                {
                    b.Property<int>("StockTakeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockTakeID");

                    b.ToTable("StockTake");
                });

            modelBuilder.Entity("Team7.Models.StockTakeLine", b =>
                {
                    b.Property<int>("StockTakeLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Difference")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryItemID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SaleItemID")
                        .HasColumnType("int");

                    b.Property<int?>("StockTakeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("StockTakeLineID");

                    b.HasIndex("InventoryItemID");

                    b.HasIndex("SaleItemID");

                    b.HasIndex("StockTakeID");

                    b.ToTable("StockTakeLine");
                });

            modelBuilder.Entity("Team7.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cell")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierID");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Team7.Models.SupplierOrder", b =>
                {
                    b.Property<int>("SupplierOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderStatusID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SupplierID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("SupplierOrderID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("SupplierID");

                    b.ToTable("SupplierOrder");
                });

            modelBuilder.Entity("Team7.Models.SupplierOrderLine", b =>
                {
                    b.Property<int>("SupplierOrderLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InventoryItemID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierOrderID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("SupplierOrderLineID");

                    b.HasIndex("InventoryItemID");

                    b.HasIndex("SupplierOrderID");

                    b.ToTable("SupplierOrderLine");
                });

            modelBuilder.Entity("Team7.Models.Title", b =>
                {
                    b.Property<int>("TitleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TitleID");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("Team7.Models.VAT", b =>
                {
                    b.Property<int>("VATID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("VATID");

                    b.ToTable("VAT");
                });

            modelBuilder.Entity("Team7.Models.Venue", b =>
                {
                    b.Property<int>("VenueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueID");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("Team7.Models.WriteOff", b =>
                {
                    b.Property<int>("WriteOffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("WriteOffID");

                    b.ToTable("WriteOff");
                });

            modelBuilder.Entity("Team7.Models.WriteOffLine", b =>
                {
                    b.Property<int>("WriteOffLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InventoryItemID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("WriteOffID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("WriteOffReasonID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("WriteOffLineID");

                    b.HasIndex("InventoryItemID");

                    b.HasIndex("WriteOffID");

                    b.HasIndex("WriteOffReasonID");

                    b.ToTable("WriteOffLine");
                });

            modelBuilder.Entity("Team7.Models.WriteOffReason", b =>
                {
                    b.Property<int>("WriteOffReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WriteOffReasonID");

                    b.ToTable("WriteOffReason");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Team7.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Team7.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Team7.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Team7.Models.AppUser", b =>
                {
                    b.HasOne("Team7.Models.Title", "Title")
                        .WithMany("User")
                        .HasForeignKey("TitleID");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Team7.Models.Booking", b =>
                {
                    b.HasOne("Team7.Models.Client", "Client")
                        .WithMany("Booking")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Team7.Models.BookingAttendance", b =>
                {
                    b.HasOne("Team7.Models.Booking", "Booking")
                        .WithMany("BookingAttendance")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.Schedule", "Schedule")
                        .WithMany("BookingAttendance")
                        .HasForeignKey("ScheduleID");

                    b.Navigation("Booking");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Team7.Models.BookingPriceHistory", b =>
                {
                    b.HasOne("Team7.Models.BookingType", "BookingType")
                        .WithMany("BookingPriceHistory")
                        .HasForeignKey("BookingTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingType");
                });

            modelBuilder.Entity("Team7.Models.DateSession", b =>
                {
                    b.HasOne("Team7.Models.Session", "Session")
                        .WithMany("DateSession")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Team7.Models.Employee", b =>
                {
                    b.HasOne("Team7.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("Team7.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employee")
                        .HasForeignKey("EmployeeTypeID");

                    b.HasOne("Team7.Models.Qualification", "Qualification")
                        .WithMany("Employee")
                        .HasForeignKey("QualificationID");

                    b.Navigation("AppUser");

                    b.Navigation("EmployeeType");

                    b.Navigation("Qualification");
                });

            modelBuilder.Entity("Team7.Models.Exercise", b =>
                {
                    b.HasOne("Team7.Models.ExerciseCategory", "ExerciseCategory")
                        .WithMany("Exercise")
                        .HasForeignKey("ExerciseCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseCategory");
                });

            modelBuilder.Entity("Team7.Models.InventoryItem", b =>
                {
                    b.HasOne("Team7.Models.SaleItem", "SaleItem")
                        .WithMany("InventoryItem")
                        .HasForeignKey("SaleItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleItem");
                });

            modelBuilder.Entity("Team7.Models.Lesson", b =>
                {
                    b.HasOne("Team7.Models.Employee", "Employee")
                        .WithMany("Lesson")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Team7.Models.LessonPlan", b =>
                {
                    b.HasOne("Team7.Models.Exercise", "Exercise")
                        .WithMany("LessonPlan")
                        .HasForeignKey("ExerciseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.Lesson", "Lesson")
                        .WithMany("LessonPlan")
                        .HasForeignKey("LessonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Team7.Models.Measurement", b =>
                {
                    b.HasOne("Team7.Models.Member", "Member")
                        .WithMany("Measurement")
                        .HasForeignKey("MemberID");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Team7.Models.Member", b =>
                {
                    b.HasOne("Team7.Models.Client", "Client")
                        .WithMany("Member")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.MemberStatus", "MemberStatus")
                        .WithMany("Member")
                        .HasForeignKey("MemberStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("MemberStatus");
                });

            modelBuilder.Entity("Team7.Models.Payment", b =>
                {
                    b.HasOne("Team7.Models.Booking", "Booking")
                        .WithMany("Payment")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.PaymentType", "PaymentType")
                        .WithMany("Payment")
                        .HasForeignKey("PaymentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.Sale", "Sale")
                        .WithMany("Payment")
                        .HasForeignKey("SaleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("PaymentType");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Team7.Models.PriceHistory", b =>
                {
                    b.HasOne("Team7.Models.SaleItem", "SaleItem")
                        .WithMany("PriceHistory")
                        .HasForeignKey("SaleItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleItem");
                });

            modelBuilder.Entity("Team7.Models.Qualification", b =>
                {
                    b.HasOne("Team7.Models.QualificationType", "QualificationType")
                        .WithMany("Qualification")
                        .HasForeignKey("QualificationTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QualificationType");
                });

            modelBuilder.Entity("Team7.Models.Refund", b =>
                {
                    b.HasOne("Team7.Models.Payment", "Payment")
                        .WithMany("Refund")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.RefundReason", "RefundReason")
                        .WithMany("Refund")
                        .HasForeignKey("RefundReasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("RefundReason");
                });

            modelBuilder.Entity("Team7.Models.Sale", b =>
                {
                    b.HasOne("Team7.Models.Client", null)
                        .WithMany("Sale")
                        .HasForeignKey("ClientID");
                });

            modelBuilder.Entity("Team7.Models.SaleItem", b =>
                {
                    b.HasOne("Team7.Models.SaleCategory", "SaleCategory")
                        .WithMany("SaleItem")
                        .HasForeignKey("SaleCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleCategory");
                });

            modelBuilder.Entity("Team7.Models.SaleLine", b =>
                {
                    b.HasOne("Team7.Models.Client", "Client")
                        .WithMany("SaleLine")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.Sale", "Sale")
                        .WithMany("SaleLine")
                        .HasForeignKey("SaleID");

                    b.HasOne("Team7.Models.SaleItem", "SaleItem")
                        .WithMany("SaleLine")
                        .HasForeignKey("SaleItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Sale");

                    b.Navigation("SaleItem");
                });

            modelBuilder.Entity("Team7.Models.Schedule", b =>
                {
                    b.HasOne("Team7.Models.BookingType", "BookingType")
                        .WithMany("Schedule")
                        .HasForeignKey("BookingTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.DateSession", "DateSession")
                        .WithMany("Schedule")
                        .HasForeignKey("DateSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.Employee", "Employee")
                        .WithMany("Schedule")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.LessonPlan", "LessonPlan")
                        .WithMany("Schedule")
                        .HasForeignKey("LessonPlanID");

                    b.HasOne("Team7.Models.Venue", "Venue")
                        .WithMany("Schedules")
                        .HasForeignKey("VenueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingType");

                    b.Navigation("DateSession");

                    b.Navigation("Employee");

                    b.Navigation("LessonPlan");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Team7.Models.StockTakeLine", b =>
                {
                    b.HasOne("Team7.Models.InventoryItem", "InventoryItem")
                        .WithMany("StockTakeLine")
                        .HasForeignKey("InventoryItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.SaleItem", null)
                        .WithMany("StockTakeLine")
                        .HasForeignKey("SaleItemID");

                    b.HasOne("Team7.Models.StockTake", "StockTake")
                        .WithMany("StockTakeLine")
                        .HasForeignKey("StockTakeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItem");

                    b.Navigation("StockTake");
                });

            modelBuilder.Entity("Team7.Models.SupplierOrder", b =>
                {
                    b.HasOne("Team7.Models.OrderStatus", "OrderStatus")
                        .WithMany("SupplierOrder")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.Supplier", "Supplier")
                        .WithMany("SupplierOrder")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderStatus");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Team7.Models.SupplierOrderLine", b =>
                {
                    b.HasOne("Team7.Models.InventoryItem", "InventoryItem")
                        .WithMany("SupplierOrderLine")
                        .HasForeignKey("InventoryItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.SupplierOrder", "SupplierOrder")
                        .WithMany("SupplierOrderLine")
                        .HasForeignKey("SupplierOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItem");

                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("Team7.Models.WriteOffLine", b =>
                {
                    b.HasOne("Team7.Models.InventoryItem", "InventoryItem")
                        .WithMany("WriteOffLine")
                        .HasForeignKey("InventoryItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.WriteOff", "WriteOff")
                        .WithMany("WriteOffLine")
                        .HasForeignKey("WriteOffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team7.Models.WriteOffReason", "WriteOffReason")
                        .WithMany("WriteOffLine")
                        .HasForeignKey("WriteOffReasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItem");

                    b.Navigation("WriteOff");

                    b.Navigation("WriteOffReason");
                });

            modelBuilder.Entity("Team7.Models.Booking", b =>
                {
                    b.Navigation("BookingAttendance");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Team7.Models.BookingType", b =>
                {
                    b.Navigation("BookingPriceHistory");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Team7.Models.Client", b =>
                {
                    b.Navigation("Booking");

                    b.Navigation("Member");

                    b.Navigation("Sale");

                    b.Navigation("SaleLine");
                });

            modelBuilder.Entity("Team7.Models.DateSession", b =>
                {
                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Team7.Models.Employee", b =>
                {
                    b.Navigation("Lesson");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Team7.Models.EmployeeType", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Team7.Models.Exercise", b =>
                {
                    b.Navigation("LessonPlan");
                });

            modelBuilder.Entity("Team7.Models.ExerciseCategory", b =>
                {
                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("Team7.Models.InventoryItem", b =>
                {
                    b.Navigation("StockTakeLine");

                    b.Navigation("SupplierOrderLine");

                    b.Navigation("WriteOffLine");
                });

            modelBuilder.Entity("Team7.Models.Lesson", b =>
                {
                    b.Navigation("LessonPlan");
                });

            modelBuilder.Entity("Team7.Models.LessonPlan", b =>
                {
                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Team7.Models.Member", b =>
                {
                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("Team7.Models.MemberStatus", b =>
                {
                    b.Navigation("Member");
                });

            modelBuilder.Entity("Team7.Models.OrderStatus", b =>
                {
                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("Team7.Models.Payment", b =>
                {
                    b.Navigation("Refund");
                });

            modelBuilder.Entity("Team7.Models.PaymentType", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Team7.Models.Qualification", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Team7.Models.QualificationType", b =>
                {
                    b.Navigation("Qualification");
                });

            modelBuilder.Entity("Team7.Models.RefundReason", b =>
                {
                    b.Navigation("Refund");
                });

            modelBuilder.Entity("Team7.Models.Sale", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("SaleLine");
                });

            modelBuilder.Entity("Team7.Models.SaleCategory", b =>
                {
                    b.Navigation("SaleItem");
                });

            modelBuilder.Entity("Team7.Models.SaleItem", b =>
                {
                    b.Navigation("InventoryItem");

                    b.Navigation("PriceHistory");

                    b.Navigation("SaleLine");

                    b.Navigation("StockTakeLine");
                });

            modelBuilder.Entity("Team7.Models.Schedule", b =>
                {
                    b.Navigation("BookingAttendance");
                });

            modelBuilder.Entity("Team7.Models.Session", b =>
                {
                    b.Navigation("DateSession");
                });

            modelBuilder.Entity("Team7.Models.StockTake", b =>
                {
                    b.Navigation("StockTakeLine");
                });

            modelBuilder.Entity("Team7.Models.Supplier", b =>
                {
                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("Team7.Models.SupplierOrder", b =>
                {
                    b.Navigation("SupplierOrderLine");
                });

            modelBuilder.Entity("Team7.Models.Title", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Team7.Models.Venue", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Team7.Models.WriteOff", b =>
                {
                    b.Navigation("WriteOffLine");
                });

            modelBuilder.Entity("Team7.Models.WriteOffReason", b =>
                {
                    b.Navigation("WriteOffLine");
                });
#pragma warning restore 612, 618
        }
    }
}
